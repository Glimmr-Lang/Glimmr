#[extern]
fn map (arr: [a]) (f: a -> b) : [b] = 
	return arr.map(f);

#[extern]
fn filter (arr: [a]) (f: a -> Boolean) : [a] = 
	return arr.filter(f);

#[extern]
fn reduce (arr: [a]) (f: a -> b -> b) (initial: b) : b = 
	return arr.reduce(f, initial);

#[extern]
fn forEach (arr: [a]) (f: a -> Unit) : Unit = 
	arr.forEach(f);

#[extern]
fn length (arr: [a]) : Number = 
	return arr.length;

#[extern]
fn join (arr: [a]) (separator: String) : String = 
	return arr.join(separator);

#[extern]
fn concat (arr1: [a]) (arr2: [a]) : [a] = 
	return arr1.concat(arr2);

#[extern]
fn push (arr: [a]) (item: a) : Number = 
	return arr.push(item);

#[extern]
fn pop (arr: [a]) : a = 
	return arr.pop();

#[extern]
fn shift (arr: [a]) : a = 
	return arr.shift();

#[extern]
fn unshift (arr: [a]) (item: a) : Number = 
	return arr.unshift(item);

#[extern]
fn slice (arr: [a]) (start: Number) (end: Number) : [a] = 
	return arr.slice(start, end);

#[extern]
fn reverse (arr: [a]) : [a] = 
	return arr.slice().reverse();

#[extern]
fn sort (arr: [a]) : [a] = 
	return arr.slice().sort();

#[extern]
fn sortBy (arr: [a]) (f: a -> a -> Number) : [a] = 
	return arr.slice().sort(f);

#[extern]
fn find (arr: [a]) (f: a -> Boolean) : a = 
	return arr.find(f);

#[extern]
fn findIndex (arr: [a]) (f: a -> Boolean) : Number = 
	return arr.findIndex(f);

#[extern]
fn includes (arr: [a]) (item: a) : Boolean = 
	return arr.includes(item);

#[extern]
fn some (arr: [a]) (f: a -> Boolean) : Boolean = 
	return arr.some(f);

#[extern]
fn every (arr: [a]) (f: a -> Boolean) : Boolean = 
	return arr.every(f);

#[extern]
fn zip (arr1: [a]) (arr2: [b]) : [{a: a, b: b}] = 
	return arr1.map((item, index) => ({ a: item, b: arr2[index] })); 